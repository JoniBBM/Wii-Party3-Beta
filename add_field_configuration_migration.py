#!/usr/bin/env python3
"""
Migration Script: F√ºgt FieldConfiguration Tabelle hinzu

F√ºhre dieses Script aus, um die bestehende Datenbank zu aktualisieren:
python add_field_configuration_migration.py
"""

import os
import sys
import sqlite3

# F√ºge das Projekt-Root-Verzeichnis zum sys.path hinzu
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, PROJECT_ROOT)

from app import create_app, db
from app.models import FieldConfiguration

def add_field_configuration_table():
    """F√ºgt die FieldConfiguration Tabelle hinzu"""
    
    app = create_app()
    
    with app.app_context():
        print("üîÑ √úberpr√ºfe Datenbank-Schema f√ºr FieldConfiguration...")
        
        # Pr√ºfe ob die Tabelle bereits existiert
        inspector = db.inspect(db.engine)
        tables = inspector.get_table_names()
        
        if 'field_configuration' in tables:
            print("‚úÖ FieldConfiguration Tabelle existiert bereits!")
        else:
            print("‚ûï Erstelle FieldConfiguration Tabelle...")
            try:
                # Erstelle die Tabelle
                db.create_all()
                print("‚úÖ FieldConfiguration Tabelle erfolgreich erstellt!")
            except Exception as e:
                print(f"‚ùå Fehler beim Erstellen der Tabelle: {e}")
                return False
        
        # Initialisiere Standard-Konfigurationen
        try:
            print("üîß Initialisiere Standard-Feld-Konfigurationen...")
            FieldConfiguration.initialize_default_configs()
            print("‚úÖ Standard-Feld-Konfigurationen initialisiert!")
            
            # Zeige erstellte Konfigurationen
            configs = FieldConfiguration.query.all()
            print(f"\nüìä {len(configs)} Feld-Konfigurationen verf√ºgbar:")
            for config in configs:
                status = "üü¢ Aktiv" if config.is_enabled else "üî¥ Deaktiviert"
                print(f"   {config.icon} {config.display_name} - {status} (alle {config.frequency_value} Felder)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Fehler beim Initialisieren der Konfigurationen: {e}")
            return False

def verify_migration():
    """√úberpr√ºft ob die Migration erfolgreich war"""
    
    app = create_app()
    
    with app.app_context():
        try:
            # Teste ob die neue Tabelle funktioniert
            test_config = FieldConfiguration.get_config_for_field('start')
            
            if test_config:
                print("üß™ Teste FieldConfiguration-Features...")
                print(f"   ‚úÖ Start-Feld Konfiguration: {test_config.display_name}")
                print(f"   ‚úÖ Farbe: {test_config.color_hex}")
                print(f"   ‚úÖ Icon: {test_config.icon}")
                print(f"   ‚úÖ Aktiviert: {test_config.is_enabled}")
                
                # Teste config_dict Property
                config_dict = test_config.config_dict
                print(f"   ‚úÖ Zusatz-Konfiguration: {config_dict}")
                
                # Teste get_all_enabled
                enabled_configs = FieldConfiguration.get_all_enabled()
                print(f"   ‚úÖ {len(enabled_configs)} aktivierte Feld-Typen gefunden")
                
                print("‚úÖ Migration erfolgreich! FieldConfiguration funktioniert.")
                return True
            else:
                print("‚ùå Verifikation fehlgeschlagen: Keine Start-Feld Konfiguration gefunden.")
                return False
                
        except Exception as e:
            print(f"‚ùå Verifikation fehlgeschlagen: {e}")
            return False

def main():
    """Hauptfunktion f√ºr die Migration"""
    
    print("üéØ Starte Migration f√ºr FieldConfiguration-System...")
    print("=" * 60)
    
    # Pr√ºfe ob die Datenbank existiert
    db_path = os.path.join(PROJECT_ROOT, 'app.db')
    if not os.path.exists(db_path):
        print("‚ùå Datenbank app.db nicht gefunden!")
        print("üí° F√ºhre zuerst 'python init_db.py' aus, um die Datenbank zu erstellen.")
        return False
    
    # F√ºhre Migration aus
    success = add_field_configuration_table()
    
    if success:
        print("\nüîç Verifiziere Migration...")
        verify_success = verify_migration()
        
        if verify_success:
            print("\nüéâ Migration erfolgreich abgeschlossen!")
            print("\nNEUE FELD-MANAGEMENT-FEATURES:")
            print("=" * 60)
            print("‚úÖ Konfigurierbare Feld-H√§ufigkeiten")
            print("‚úÖ Aktivierung/Deaktivierung von Feld-Typen")
            print("‚úÖ Anpassbare Farben und Icons")
            print("‚úÖ Erweiterte Feld-Konfigurationen")
            print("‚úÖ Admin-Interface f√ºr Feld-Verwaltung")
            
            print("\nüéÆ VERF√úGBARE FELD-TYPEN:")
            with create_app().app_context():
                configs = FieldConfiguration.query.all()
                for config in sorted(configs, key=lambda x: x.frequency_value):
                    freq_text = f"alle {config.frequency_value}" if config.frequency_value > 0 else "spezielle Position"
                    print(f"  {config.icon} {config.display_name} - {freq_text} Felder")
            
            print("\nüîß KONFIGURATIONSOPTIONEN:")
            print("  - H√§ufigkeit: Modulo-basiert, feste Positionen oder Wahrscheinlichkeit")
            print("  - Aktivierung: Ein-/Ausschalten einzelner Feld-Typen")
            print("  - Farben: Hex-Codes f√ºr Frontend-Darstellung")
            print("  - Icons: Emoji/Unicode-Symbole f√ºr bessere Erkennbarkeit")
            print("  - Zusatz-Config: JSON-basierte erweiterte Einstellungen")
            
            print("\nüé≤ Das Feld-System ist bereit f√ºr individuelle Anpassungen!")
            return True
        else:
            print("\n‚ö†Ô∏è  Migration wurde ausgef√ºhrt, aber Verifikation fehlgeschlagen.")
            return False
    else:
        print("\n‚ùå Migration fehlgeschlagen!")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)